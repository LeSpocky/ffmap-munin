#!/usr/bin/perl -w

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2015 Alexander Dahl <alex@netz39.de>

use strict;
use warnings;
use utf8;    # this script is written in utf-8

use feature qw(say);

use lib $ENV{'MUNIN_LIBDIR'};
use Munin::Plugin;

use Carp;
use Data::Dumper;
use DateTime;
use DateTime::Format::ISO8601;
use Encode::Locale;
use Encode;
use English qw( -no_match_vars );
use HTTP::Request;
use JSON;
use LWP::UserAgent;
use Readonly;
use UUID::Tiny ':std';

Readonly my $AGE_THRESHOLD => 60;

# get uuid from symbolic link filename
my $uuid;
if ( $PROGRAM_NAME =~ /pegelonline_(.+)*$/xms ) {
    $uuid = $1;
} else {
    croak '$uuid undefined';
}
if ( !is_uuid_string($uuid) ) {
    croak "'$uuid' is no valid UUID!";
}

# build url and get it
my $url
    = 'http://www.pegelonline.wsv.de/webservices/rest-api/v2/'
    . 'stations.json?'
    . "ids=${uuid}"
    . '&includeTimeseries=true'
    . '&includeCurrentMeasurement=true'
    . '&prettyprint=false';
my $ua = LWP::UserAgent->new();
my $request = HTTP::Request->new( GET => $url );

$request->accept_decodable();

my $response = $ua->request($request);

my $decoded_response;
if ( $response->is_success() ) {
    $decoded_response = $response->decoded_content();
} else {
    say {*STDERR} "get '$url' failed: ", $response->status_line;
    croak 'could not download data';
}

# decode json
my $stations = decode_json($decoded_response);

# values
my $timeseries   = $stations->[0]{timeseries};
my $unit         = $timeseries->[0]{unit};
my $current_meas = $timeseries->[0]{currentMeasurement};

my $value = $current_meas->{value};
my $dt    = DateTime::Format::ISO8601->parse_datetime(
    $current_meas->{timestamp} );
my $now = DateTime->now;
my $dur = $now->subtract_datetime($dt);
if ( $dur->in_units('minutes') > $AGE_THRESHOLD ) {
    croak "value older than $AGE_THRESHOLD minutes, I don't take it!";
}

my $key = clean_fieldname( 'u' . $uuid );

# config
if ( $ARGV[0] and $ARGV[0] eq 'config' ) {
    say 'graph_title PEGELONLINE';
    say 'graph_args --base 1000 --lower-limit 0';
    say 'graph_scale no';
    say 'graph_category pegelonline';
    say "graph_vlabel ${unit}";
    say "${key}.label "
        . encode( 'iso-8859-1', $stations->[0]{longname} );
    say "${key}.type GAUGE";
    say "${key}.min 0";
    say "${key}.colour COLOUR1";
    say "${key}.warning 600";
    say "${key}.critical 700";
    say "${key}.draw AREA";

    exit 0;
}

say $key . '.value ' . $value;

# vim: set ft=perl et sts=0 ts=4 sw=4 sr:
